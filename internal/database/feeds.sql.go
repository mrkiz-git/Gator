// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, user_id, name, url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, name, url, created_at, updated_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedRow struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (CreateFeedRow, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Url,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE id = $1
`

func (q *Queries) DeleteFeed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, id)
	return err
}

const getFeedByID = `-- name: GetFeedByID :many
SELECT id, user_id, name, url, created_at, updated_at
FROM feeds
WHERE id = $1
`

type GetFeedByIDRow struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetFeedByID(ctx context.Context, id uuid.UUID) ([]GetFeedByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedByIDRow
	for rows.Next() {
		var i GetFeedByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedByURL = `-- name: GetFeedByURL :many
SELECT id, user_id, name, url, created_at, updated_at, last_fetched_at FROM feeds
WHERE URL = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeedByURL, url)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, user_id, name, url, created_at, updated_at, last_fetched_at
FROM feeds
ORDER BY last_fetched_at NULLS FIRST
LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const listFeeds = `-- name: ListFeeds :many
SELECT 
    feeds.id, 
    feeds.user_id,
    users.name user_name,
    feeds.name, 
    feeds.url, 
    feeds.created_at, 
    feeds.updated_at
FROM feeds 
INNER JOIN users 
ON feeds.user_id = users.id
ORDER BY feeds.created_at DESC
`

type ListFeedsRow struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	UserName  string
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListFeeds(ctx context.Context) ([]ListFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsRow
	for rows.Next() {
		var i ListFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserName,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeedsByUserID = `-- name: ListFeedsByUserID :many
SELECT id, user_id, name, url, created_at, updated_at
FROM feeds
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListFeedsByUserIDRow struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListFeedsByUserID(ctx context.Context, userID uuid.NullUUID) ([]ListFeedsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsByUserIDRow
	for rows.Next() {
		var i ListFeedsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :one
UPDATE feeds s SET last_fetched_at = $1
WHERE id = $2
RETURNING id, user_id, name, url, created_at, updated_at, last_fetched_at
`

type MarkFeedFetchedParams struct {
	LastFetchedAt sql.NullTime
	ID            uuid.UUID
}

func (q *Queries) MarkFeedFetched(ctx context.Context, arg MarkFeedFetchedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, markFeedFetched, arg.LastFetchedAt, arg.ID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const updateFeed = `-- name: UpdateFeed :one
UPDATE feeds
SET name = $2, url = $3, updated_at = $4
WHERE id = $1
RETURNING id, user_id, name, url, created_at, updated_at
`

type UpdateFeedParams struct {
	ID        uuid.UUID
	Name      string
	Url       string
	UpdatedAt time.Time
}

type UpdateFeedRow struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateFeed(ctx context.Context, arg UpdateFeedParams) (UpdateFeedRow, error) {
	row := q.db.QueryRowContext(ctx, updateFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UpdatedAt,
	)
	var i UpdateFeedRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
